# -*- coding: utf-8 -*-
"""Academy_Python_Intro_to_submit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YExkOtW9EKE3jl6QbpSb50VRgTe7U1l9

# Analytics Academy of Data Corner

#### Introduction to Python Programming

## Lab Activity 1

Add an introduction using Markdown with following info:

* Your full name
* Today Date



Write a Line of python code to print “Hello World”

My name is Laura Gutiérrez and today is  Friday, July 28.
"""

print("Hello World")

# how to find your jupyter path

pwd

"""# varibales"""

numOfBoxes = 12
ownerName = "Sofia"
print("numOfBoxes= ", numOfBoxes)
print("ownerName= ", ownerName)

"""# Lists"""

# Lists
mylist = []
mylist.append(1)
mylist.append(2)
mylist.append(3)
print(mylist[0]) # prints 1
print(mylist[1]) # prints 2
print(mylist[2]) # prints 3

print ("=============")

# prints out 1, 2, 3
for x in mylist:
  print(x)

"""## Lab Activity 2

In this exercise, you will need to add numbers and strings to the correct lists using the "append" list method. You must add the numbers 1,2, and 3 to the "numbers" list, and the words 'hello' and 'world' to the string variable.

You will also have to fill in the variable second_name with the second name in the names list, using the brackets operator []. Note that the index is zero-based, so if you want to access the second item in the list, its index will be 1.



"""

numbers =[]
strings= []
names = ["John","Eric","Jessica"]

#write your code here

numbers.append(1)
numbers.append(2)
numbers.append(3)
strings.append("hello")
strings.append("world")

second_name= names[1]  ## write your code here

#this code should  write out the filled arrays and the second name in the names list (Eric)

print (numbers)
print (strings)
print ("The second name on the names list is %s" % second_name)

"""# Basic Operators"""

# Arithmetic Operators
number = 1 + 2 * 3 / 4.0
print(number)

remainder = 11 % 3
print(remainder)

# Using two multiplication symbols makes a power relationship
squared = 7 ** 2
cubed = 2 ** 3
print (squared)
print(cubed)

"""# Conditions"""

x = 2
print(x == 2) # prints out True
print(x == 3) # prints out False
print(x < 3) # prints out True

name = "John"
age = 23
if name == "John" and age == 23:
  print("Your name is John, and you are also 23 years old.")

if name == "John" or name == "Rick":
  print("Your name is either John or Rick.")

# the "in" operaton

name = "John"
if name in ["John", "Rick"]:
  print("Your name is either John or Rick.")

"""## Lab Activity 3

In the following code, change the variables in the first section, so that each if statement resolves as True.
You should generarte the follwoing output:

1

2

3

4

"""

number = 17
second_number = 10
first_array = [1,2,3]
second_array= [1,2]

if number > 15:
    print ("1")

if first_array:
    print ("2")

if len (second_array)==2 :
    print ("3")

if len (first_array) + len (second_array)==5:
    print ("4")



"""# Loops"""

primes = [2, 3, 5, 7]
for prime in primes:
  print(primes)

# Prints out 0,1,2,3,4

count = 0
while count < 5:
  print(count)
  count += 1 # This is the same as count = count + 1

# Prints out 0,1,2,3,4

count = 0
while True:
  print(count)
  count += 1
  if count >= 5:
    break

# Prints out only odd numbers - 1,3,5,7,9
for x in range (10):
  #Check if x is even
  if x % 2 == 0:
    continue
  print(x)

"""# Lab Activity 4

Write a loop to calculate the factorial for the value stored in varibale inputVar
"""

inputVar = 5

factorial = 0
x = 0
while x <= inputVar:
  if x == 0:
    factorial = 1
  else:
    factorial = factorial * x
  x += 1

print(factorial)

"""


# Working with data frames in Python



"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np



#---- if you need to install any python packagaes

#import sys
#!{sys.executable} -m pip install numpy

"""## Loading data into a dataframe"""

pwd

dfMain = pd.read_csv("Loans_Dataset.csv")

dfMain.shape

dfMain.head(10)

dfMain["Employment.Type"].head()

dfMain["asset_cost"].describe()

dfMain.dtypes

"""# Filtering based on Conditions:


Datasets can be filtered using different conditions, which can be implemented using logical operators in python. For example, == (double equal to), ≤ (less than or equal to), ≥(greater than or equal to), etc.
"""

dfMain[(dfMain['Employment.Type'] == "Salaried")]

dfMain[(dfMain['Employment.Type'] == "Salaried") & (dfMain['branch_id'] == 100)]



"""# Lab Activity 5
Filter the dfMain based on the follwoing conditions:

asset_cost > 8000 and loan_default=1

How many records exists with this condition?
"""

records = dfMain[(dfMain["asset_cost"] > 8000) & (dfMain['loan_default'] == 1)]

print(len(records))